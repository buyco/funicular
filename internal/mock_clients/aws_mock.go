// Code generated by MockGen. DO NOT EDIT.
// Source: aws.go

// Package mock_clients is a generated GoMock package.
package mock_clients

import (
	gomock "github.com/golang/mock/gomock"
	io "io"
	reflect "reflect"
)

// MockStorageAccessLayer is a mock of StorageAccessLayer interface
type MockStorageAccessLayer struct {
	ctrl     *gomock.Controller
	recorder *MockStorageAccessLayerMockRecorder
}

// MockStorageAccessLayerMockRecorder is the mock recorder for MockStorageAccessLayer
type MockStorageAccessLayerMockRecorder struct {
	mock *MockStorageAccessLayer
}

// NewMockStorageAccessLayer creates a new mock instance
func NewMockStorageAccessLayer(ctrl *gomock.Controller) *MockStorageAccessLayer {
	mock := &MockStorageAccessLayer{ctrl: ctrl}
	mock.recorder = &MockStorageAccessLayerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStorageAccessLayer) EXPECT() *MockStorageAccessLayerMockRecorder {
	return m.recorder
}

// Upload mocks base method
func (m *MockStorageAccessLayer) Upload(path, filename string, data io.Reader) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upload", path, filename, data)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Upload indicates an expected call of Upload
func (mr *MockStorageAccessLayerMockRecorder) Upload(path, filename, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upload", reflect.TypeOf((*MockStorageAccessLayer)(nil).Upload), path, filename, data)
}
